<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<Nullable>enable</Nullable>
		<LangVersion>10</LangVersion>
		<WarningsAsErrors>nullable</WarningsAsErrors>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>

		<PublishRepositoryUrl>true</PublishRepositoryUrl>
		<IncludeSymbols>true</IncludeSymbols>

		<!-- Include symbol files (*.pdb) in the built .nupkg -->
		<AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

		<Author>Arlo Godfrey</Author>
		<Version>0.1.0</Version>
		<Product>OwlCore</Product>
		<PackageProjectUrl>https://github.com/Arlodotexe/OwlCore</PackageProjectUrl>
		<Description>Have you ever seen an owl do a barrel roll? Me neither.

Essential supplemental tooling for .NET development. Included in this package:
- OwlCore.Storage: The fundamental concepts of files and folders carefully abstracted into standard interfaces. Interact with Local Disk, Cloud Storage, Blob Storage, protocol-based storage, and even 100% in-memory storage, all using the same interfaces.
- OwlCore.Extensions: A collection of exceptionally useful extension methods.
- OwlCore.ComponentModel: Provides classes used to implement the run-time behavior of components. SettingsBase, IDelegatable{T}, IAsyncInit, etc.
- OwlCore.AbstractUI - Abstracts simple UI elements as pure data. Send over a network, store on disk, share between platforms, etc. Make something else worry about rendering and interacting.
- Much more not listed, much more to come.

The experimental, available in separate packages:
- OwlCore.Remoting: A extremely lightweight and flexible RPC framework for .NET Standard 2.0.
- OwlCore.Kubo: A library of essential tooling for Kubo, the earliest and most widely used implementation of IPFS.
		</Description>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<PackageIcon>logo.png</PackageIcon>
		<PackageReleaseNotes>
--- 0.1.0 ---
This package now follows a modified variant of semver2.0, standard across all new OwlCore packages. Breaking changes may occur as a minor version bump if the major version is 0.

This release marks a major effort to consolidate namespaces and migrate away from deprecated code.

[New]
OwlCore.Extensions is now in a separate nuget package.
OwlCore.ComponentModel is now in a separate nuget package.
OwlCore.Storage has been added as a transitive reference.
OwlCore.Remoting is now in a separate nuget package and not included as a transitive reference.
Added a FlushDefaultValues property to SettingsBase. Default value is true to match existing behavior. When set to false, it will skip writing default values to disk - recommended if your default values never change. 
Added a FlushOnlyChangedValues property to SettingsBase. Default value is false to match existing behavior. When set to true, only values that are changed in memory will be flushed to storage - recommended if you don't expect others to modify the settings files.

[Improvements]
In SettingsBase, when the stream for a setting isn't fully read (which makes deserialization impossible), the setting won't be loaded and LoadFailed will be emitted.

[Breaking changes]
OwlCore.AbstractStorage has been removed. Please migrate to the (much better) OwlCore.Storage instead.
OwlCore.AbstractUI.Models.AbstractUICollection.Items property has been removed. Enumerate or modify the collection directly instead.
OwlCore.Services.SettingsBase has been migrated to OwlCore.Storage.
OwlCore.Validation.Ensure and all usages of it have been removed in favor of CommunityToolkit.Diagnostics.Guard.
OwlCore.Services.IInstanceCacheRepository and OwlCore.Services.InstanceCacheRepository have been removed. Just use a Dictionary{T, T} instead.
OwlCore.Provisos.IAsyncInit was moved to OwlCore.ComponentModel.IAsyncInit.
OwlCore.Events.CollectionChangedEventHandler was moved to OwlCore.ComponentModel.CollectionChangedEventHandler.
OwlCore.Events.CollectionChangedItem{T} was moved to OwlCore.ComponentModel.CollectionChangedItem{T}.
OwlCore.Provisos.IAsyncSerializer{T} was moved to OwlCore.ComponentModel.IAsyncSerializer{T}.
OwlCore.Services.IDelegatable{T} was moved to OwlCore.ComponentModel.IDelegatable{T}.
OwlCore.Services.SettingsBase was moved to OwlCore.ComponentModel.SettingsBase.
OwlCore.Services.LogLevel was moved to OwlCore.ComponentModel.LogLevel.
OwlCore.Services.Logger was moved to OwlCore.ComponentModel.Logger.
OwlCore.Services.LoggerMessageEventArgs was moved to OwlCore.ComponentModel.LoggerMessageEventArgs.
OwlCore.Validation.Mime.MimeTypeMap has been moved to extension methods in OwlCore.Extensions.
ReferenceEqualityComparer has been moved from OwlCore.EqualityComparers to OwlCore.Collections.Generic, matching the namespace of the System.Collections.Generic.ReferenceEqualityComparer in .NET 5+.
OwlCore.APIs.GetAllItemsAsync has been moved to OwlCore.Flow.GetPaginatedItemsAsync.
OwlCore.Flow.EasySemaphore has been moved to an extension method, as OwlCore.Extensions.SemaphoreSlimExtensions.DisposableWaitAsync.
OwlCore.Flow.WhenCancelled has been moved to an extension method, as OwlCore.Extensions.AsyncExtensions.WhenCancelledAsync.

--- 0.0.71 ---
[New]
Added new extension: SynchronizationContext.PostAsync. Allows cleanly waiting for an async callback to fully complete before continuing execution.

--- 0.0.70 ---
[Fixes]
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.69, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.69 ---
[Improvements]
InParallel extension method now throws AggregateException when any tasks throw. Test included up to 1,000,00 inner exceptions.

--- 0.0.68 ---
[Fixes]
Fixed an exception when [RemoteMethod] is placed on a class with events.

[Improvements]
Updated dependencies to latest version.

--- 0.0.67 ---
[Fixes]
Fixed missing property getter on ValueChangedCommand.

--- 0.0.66 ---
[Fixes]
Fixed an issue in SettingsBase where resetting a property to default by assigning a null value wouldn't fire PropertyChanged.
			
[Improvements]
SettingsBase.ResetSetting() and SettingsBase.ResetAllSettings() have been added.

[Breaking changes]
Inbox support for OwlCore.Remoting in AbstractUI has been removed. If you need this functionality, create your own remoting-enabled wrapper class around the AbstractUI classes. 

--- 0.0.65 ---
[New]
OwlCore.Services now contains a Logger. This is a static class that simply routes messages in via methods and out via an event handler, similar to System.Diagnostics.Debug, but works outside Debug mode. Unit tested.

[Improvements]
Flow.EventAsTask now uses TrySetCanceled and TrySetResult, fixing some rare cases where an exception might be throwing during parallel execution.
			
--- 0.0.64 ---
[Breaking changes]
OwlCore has been updated to use CommunityToolkit 8.0 Preview 3 instead of Microsoft.Toolkit 7.1.

--- 0.0.63 ---
[Fixes]
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.62, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.62 ---
[Breaking changes]
Added CancellationToken parameter to IAsyncInit.InitAsync().

[Improvements]
Improved inline docs for IAsyncInit.

--- 0.0.61 ---
[Breaking changes]
To fix an issue where AbstractUICollectionViewModel.NotifyCollectionChanged wasn't being seen on some UI frameworks, the Items property is now a ReadOnlyObservableCollection and the collection is no longer enumerable and is no longer marked Deprecated. AbstractUICollection.Items is still marked as potentially obsolete.

--- 0.0.60 ---
[Fixes]
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.59, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.59 ---
[Fixes]
Fixed an issue where AbstractUICollectionViewModel wouldn't raise NotifyCollectionChanged on the correct SynchronizationContext.

[Breaking changes]
Removed the ILauncher interface. Use an event handler instead for Uri activation.

--- 0.0.58 ---
[Fixes]
Fixed an issue with SettingsBase where saving and loading a value shorter than the previous value would result in invalid data.

[Improvements]
Added LoadFailed and SaveFailed events to SettingsBase.

--- 0.0.57 ---
[Overview]
Refining AbstractUI, fixing consistency and adding unit tests.

[Breaking changes]
In AbstractButton: Click now returns void instead of Task, and the setter was removed from the Type property as it should not change after creation and had no event for changing.
AbstractColorPicker.PickColor now returns void instead of Task.
AbstractDataList.Items is now IReadOnlyList{T} instead of List{T}. Use provided methods to manipulate the items.
The setter for AbstractDataList.PreferredDisplayMode is now init-only and the setter on the corresponding ViewModel has been removed.
The setter for AbstractMultiChoice.PreferredDisplayMode is now init-only and the setter on the corresponding ViewModel has been removed.
The setter for AbstractRichTextBlock.RichText is now init-only and the setter on the corresponding ViewModel has been removed.
Setting IsIndeterminate in AbstractProgressIndicator properties no longer affect each other. Value should just be ignored if IsIndeterminate is true.
The property AbstractProgressIndicator.Value, the value parameter in the constructor, and event args in the ValueChanged event are no longer nullable.

[Improvements]
All AbstractUI models are now unit tested.
AbstractButton now has a TextChanged event handler for when the Text property is set.
AbstractDataList now takes IEnumerable instead of List for items in the constructor.
Extra unit tests for possible deadlocks while operating on SettingsBase from a handler on its own PropertyChanged event.

[Fixes]
Fixed several AbstractUI models that allowed a changed event to be raised even when the set value is the same.
Fixed EventAsTask not cancelling properly + unit tests.
Fixed EventAsTask not unsubscribing when cancelled + unit tests.
Fixed several concurrency issues with SettingsBase.

--- 0.0.56 ---
[Fixes]
Fixed InvalidCastException when accessing AbstractUICollectionViewModel.Count.
Fixed NotifyCollectionChanged not properly emitting for AbstractUICollectionViewModel.

[Improvements]
Removed hidden AbstractUI dependency on Threading.SetPrimaryThreadInvokeHandler in favor of SynchronizationContext.Post.

[Breaking changes]
AbstractUICollectionViewModel now implements IReadyOnlyCollection{T} instead of ICollection{T}. Modifications to the collection should happen via the underlying model.

--- 0.0.55 ---
[Fixes]
Fixed several InvalidCastExceptions in AbstractUICollection. Added Unit Tests for the entire class.

--- 0.0.54 ---
[Fixes]
Fixed an issue in SettingsBase where defaults would incorrectly return when non-setting files existed in the provided folder. Unit test included.

--- 0.0.53 ---
[Fixes]
Fixed a deadlock in SettingsBase when GetProperty is called during an OnPropertyChanged handler. Unit test included.

--- 0.0.52 ---
[Fixes]
Fixed possible exception in SettingsBase when LoadAsync and SetProperty are called concurrency.

--- 0.0.51 ---
[New]
SettingsBase now implements INotifyPropertyChanged. Unit tests included.

--- 0.0.50 ---
[New]
An abstract class SettingsBase has been added. Enables MVVM-like setting storage as property getters/setters, with abstracted serialization and data persistence using IAsyncSerializer and AbstractStorage. 
Added ISerializer{T}, ISerializer{T, T2}, IAsyncSerializer{T}, and IAsyncSerializer{T, T2}.
IRemoteMessageConverter now implements IAsyncSerializer{T, T2}.

[Improvements]
IFileData.WriteAllBytesAsync has been marked as obsolete and will be removed in a future version in favor of an extension method.
IFolderData.EnsureExists has been marked as obsolete and will be removed in a future version.

[Breaking changes]
ContextualServiceLocator has been removed.

--- 0.0.49 ---
[Fixes]
Fixed an issue in the DataProxy extensions for MemberRemote where an exception was thrown when the same token was received concurrently.
			
--- 0.0.48 ---
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.47.0, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.47 ---
[Fixes]
Added missing AbstractUI ViewModels.
Added tests to ensure that constructing AbstractUICollectionViewModel works with all possible models.
Fixed InvalidProgramException when calling AbstractUICollection.Remove or AbstractUICollectionViewModel.Remove caused by invalid IL code reaching the JIT Compiler.

--- 0.0.46 ---
[Fixes]
Fixed AbstractUICollection.Remove being restricted to the explicit interface implementation of ICollection{AbstractUIElement}.
Added unit tests and Adding and Removing from AbstractUICollection and AbstractUICollectionViewModel.

--- 0.0.45 ---
[New]
Added extension methods CrawlBy and CrawlByAsync. Crawls an object tree for nested properties of the same type and returns the first instance that matches a filter predicate. Unit tested.
Added OwlCore.ComponentModel.IDelegatable.
Added OwlCore.ComponentModel.ChainedProxyBuilder. Builds a class delegation chain where each item might delegate member access to the next item in the collection. Unit tested.

[Breaking changes]
CompositeHttpClientHandler and all related classes have been removed in favor of the built-in DelegatingMessageHandler, which all OwlCore handlers support by default.
OwlCore.Net.HttpClientHandlers namespace has been renamed to OwlCore.Net.Http.

--- 0.0.44 ---
[New]
New class: RemoteSemaphoreSlim. A remote-capable SemaphoreSlim implementation. Unit tests included.
Added a new overload to DataProxy: ReceiveDataAsync{TResult}(MemberRemote, string, TimeSpan, CancellationToken?). This overloads waits the given timespan for multiple published messages, then returns all received data. Unit tests included.
MemberRemote will now emit a RemoteMethodCallMessage when a method is exited.
MethodCallId has been added to MethodInterceptEventArgs and RemoteMethodCallMessage. This value is unique for every method call.
InterceptType (entry, exit) has been added to MethodInterceptEventArgs.

[Improvements]
NewtonsoftRemoteMessageConverter will now exclude null values during serialization.
OwlCore.Extensions.Cast{T} now uses aggressive inlining.
Added unit tests for the emitting of RemoteMethodCallMessage for both Entry and Exit.
AbstractUICollectionViewModel now inherits from ICollection{T} instead of IEnumerable{T}.
AbstractUICollectionViewModel now implements INotifyCollectionChanged.
AbstractUICollectionViewModel now inherits from ICollection{T} instead of IEnumerable{T}.
AbstractUICollection now implements INotifyCollectionChanged.
AbstractUICollection.Items and AbstractUICollectionViewModel.Items have been marked as obsolete and will be removed in a future version. Enumerate the collections directly instead.

[Fixes]
Fixed an issue in NewtonsoftRemoteMessageConverter where property changes were not using assembly qualified name for type conversion.
Fixed an issue in NewtonsoftRemoteMessageConverter where Enums were not being deserialized properly.
Fixed an issue in NewtonsoftRemoteMessageConverter where a concrete class value passed for an interface target type was cast to the wrong enumerable type.

[Breaking changes]
MethodEnteredEventArgs has been renamed to MethodInterceptEventArgs.
A param has been inserted at index 0 in the ctor for MethodInterceptEventArgs (string methodCallId)
A param has been inserted at index 1 in the ctor for RemoteMethodCallMessage (string methodCallId).

--- 0.0.43 ---
[Fixes]
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.42.0, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.42 ---
[Fixes]
Fixed an issue where modified shuffle maps kept in sync with the original list might not unshuffle properly. Added tests.

[Breaking changes]
Remove problematic Flow.Catch overloads, and added tests.
			
--- 0.0.41 ---
[Improvements]
Flow.Catch now has overloads to catch up to 4 exceptions.

[Breaking changes]
The type parameter order on Flow.Catch{TException, TResult}(Func{TResult}) has been swapped to {TException, TResult}. This allows for more natural usage when catching more than 1 exception.
			
--- 0.0.40 ---
[Improvements]
Shuffle extension method is now O(n) using fisher-yates.
Shuffle extension method now returns a "shuffle map" that can be used to map items to their original positions and unshuffle the collection.
Added IList{T} overload to Shuffle extension method.
Added unit tests to Shuffle extension methods.

[New]
Added Unshuffle extension method for T[] and List{T}. Pass a "shuffle map" returned by the Shuffle extension method to return a list to its' original order using a (probably) original algorithm inspired by fisher-yates with O(n) time and space complexity.

--- 0.0.39 ---
[New]
Added NavigationFailed event to AbstractFolderExplorer.
Flow.Catch now has an overload that catches all exception with no return value.

[Fixes]
Fixed a potential memory leak in Flow.WhenCancelled.

[Improvements]
Made selfCancellationToken parameter optional on CancellationToken.WhenCancelled() extension method.
Flow.Catch now properly returns default values when an exception is caught.

[Breaking changes]
Flow.TryOrSkip was renamed to Flow.Catch

--- 0.0.38 ---
[New]
Added Flow.WhenCancelled(cancellationToken) and unit tests. Returns a Task that completes when the given cancellation token is cancelled.
Added CancellationToken.WhenCancelled() extension method to OwlCore.Extensions and unit tests. Same behavior as Flow.WhenCancelled, but as an extension method.

[Breaking changes]
Deque was removed from OwlCore.Collections.Generic. For a maintained version, see https://github.com/Avid29/MoreCollections/blob/main/src/Generic/Deque.cs
SynchronizedObservableCollection was moved to OwlCore.Collections.ObjectModel.
OwlCore.Validation.Ensure was made internal. This is only used by SynchronizedObservableCollection, which may be removed in a future release.
InvokeOnUI from OwlCore.Extensions has a fatal flaw and was removed.
OwlCore.Exceptions.UIElementNotFoundException was removed.
OwlCore.Exceptions was removed.
			
--- 0.0.37 ---
[Fixes]
Fixed an issue where updating OwlCore in existing apps could result in the error "error CS1705: Assembly 'OwlCore' with identity 'OwlCore, Version=0.0.36.0, Culture=neutral, PublicKeyToken=null' uses 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

--- 0.0.36 ---
[Fixes]
Fixed issues with the RemoteLock extension methods for MemberRemote. Added Unit Tests.
Fixed an issue where DataProxy extension methods would not scope to the given member remote. Added Unit Tests.
Fixed an issue where DataProxy was unable to send null values. Added Unit Tests for null, primitives, structs and objects.
			
--- 0.0.35 ---
[Fixes]
Fixed several issues with EnumerableExtensions.ChangeCollection, and added unit tests around it.

--- 0.0.34 ---
[New]
New logo!

[Improvements]
Made MemberRemote.IsAllowedRemotingDirection public. Given the current mode, it checks if the given memberInfo allows data to flow in a certain direction.
Fixed docs on RemoteDataMessage.TargetMemberSignature.
Added Unit Tests to the DataProxy extension methods for MemberRemote.

[Fixes]
Fixed an issue where the MemberRemote.PublishDataAsync extension method used the signature scope from the MemberRemote for data, instead of AssemblyQualifiedName.
Fixed an issue where MemberRemote.PublishDataAsync returned always nullable.

[Breaking changes]
The PublishDataAsync extension method for MemberRemote now takes the call token as the first parameter instead of the second.

--- 0.0.33 ---
[Improvements]
CompositeHttpClientHandler, CompositeHttpClientHandlerActionBase, RateLimitedHttpClientHandlerAction, and CachedHttpClientHandlerAction will be deprecated and removed in a future version.
CachedHttpClientHandler now supports proper chaining as a System.Net.Http.DelegatingHandler.
RateLimitedHttpClientHandler now supports proper chaining as a System.Net.Http.DelegatingHandler.

[Breaking changes]
Removed dependency on Nito.AsyncEx.Coordination. If you were using this as a transitive dependency, install this package in your projects directly.

[Fixes]
Fixed an issue where MemberRemote wasn't fully disposed until the finalizer was called.

--- 0.0.32 ---
[New]
Added Flow.EasySemaphore() and unit tests. Provides syntactic sugar for releasing a SemaphoreSlim when execution leaves a using statement.

[Improvements]
IRemoteMessageHandler is now only initialized once while maintianing proper concurrency.
Better docs for SetPrimarySynchronizationContext and SetPrimaryThreadInvokeHandler.

--- 0.0.31 ---
[New]
Added OwlCore.Provisos.ILauncher for delegating the launch of Urls and more.

[Improvements]
Added Unit Testing to OwlCore.Remoting.MemberRemote - about 5,520 possible usage combinations (~30% coverage).
Added Unit Testing to OwlCore.Remoting.Transfer.MessageConverters.NewtonsoftRemoteMessageConverter - about 150 combinations (~70% coverage).

[Breaking changes]
To keep things clean for devs, classes in OwlCore.Remoting.Attributes and OwlCore.Remoting.EventArgs have been moved to OwlCore.Remoting.

--- 0.0.30 ---
[New]
Added ReplaceOrAdd extension method for IList{T}. Behaves the same as InsertOrAdd, but replaces at the given index if it exists.
Added Pop extension method for IList{T}. Removes and returns the last item in the list.

[Breaking changes]
InsertOrAdd and InsertOrAddRange now properly throw ArgumentOutOfRangeException when index is less than -1.

[Improvements]
We've started adding unit tests to OwlCore behind the scenes. Development of [New] features is now test driven and existing code will get tests added over time.

--- 0.0.29 ---
[New]
Added InsertOrAddRange extension method. Behaves the same as InsertOrAdd, but allows an adding or inserting an enumerable at a specific index.

[Improvements]
Added CachedRequestFound and CachedRequestSaving relay from CachedHttpClientHandlerAction to CachedHttpClientHandler.
NotNullIfNotNullAttribute and NotNullAttribute are now transitive dependencies from Microsoft.Toolkit.Mvvm

[Improvements, Breaking changes]
Added MemberSignatureScope to OwlCore.Remoting.Transfer.IRemoteMessageHandler to allow sending/receiving member changes in different assemblies, namespaces, or class names. Previously restricted to 1:1 matches of assembly, namespace and class name.
Added AssemblyQualifiedName property to RemotePropertyChangeMessage and adjusted constructor signature, as TargetMemberSignature is no longer guaranteed to match AssemblyQualifiedName.
Due to the MemberSignatureScope changes, if you've saved any values for IRemoteMemberMessage.TargetMemberSignature, they may not match values generated by this version.
The static method MemberRemote.CreateMemberSignature() now requires a second parameter specifying MemberSignatureScope. Previous default behavior was MemberSignatureScope.AssemblyQualifiedName.
OwlCore.Services.IInstanceCacheRepository.HasId() was added for checking if a specific instance Id exists in the repository.
OwlCore.AbstractStorage.IFileData.GetThumbnailAsync added for getting the thumbnail images from a file according to specified settings.
OwlCore.Remoting.Transfer.IRemoteMessageHandler.MessageConverter is now nullable.

[Fixes]
Fixed an issue with OwlCore.Remoting where non-primitive property changes and method parameters were treated as primitive during internal type conversion and throwing.
Fixed an issue where placing RemoteMethod on a class would attempt to remote calls to the Add and Remove methods for events.

--- 0.0.28 ---
[Fixes]
No code changes. Fixed release notes for a previous versions.

--- 0.0.27 ---
[Fixes]
Fixed a major issue with OwlCore.Remoting.MemberRemote where ignoring an invalid remoting direction resulted in the next message causing a throw.

--- 0.0.26 ---
[Breaking changes]
OwlCore.AbstractStorage.IFileScanner was moved to the namespace OwlCore.AbstractStorage.Scanners.
OwlCore.AbstractStorage.IFileScanner.ScanFolder was renamed to ScanFolderAsync
OwlCore.AbstractStorage.IFileScanner.ScanFolder's IFolderData parameter was redundant and removed. Implementors should pass this into the class constructor.
OwlCore.AbstractStorage.DepthFirstFileScanner was moved to the namespace OwlCore.AbstractStorage.Scanners.
OwlCore.AbstractStorage.FileScanStateEventArgs was unused and has been removed.

[Improvements]
Embedded PBD information to help with debugging.
Added examples and improved documentation for Flow.EventAsTask.
Added optional Id to IFolderData, same as the Id for IFileData.
OwlCore.Remoting.RemoteProperty can now be used on fields (weaving fields was previously supported)
Added setup and help documentation for OwlCore.Remoting (MemberRemote, RemoteMethodAttribute, RemotePropertyAttribute).
			
--- 0.0.25 ---
[Breaking changes]
OwlCore.Remoting.RemoteOptionsAttribute can no longer be used on Events (was never supported by MemberRemote).
OwlCore.Remoting.Transfer.MessageConverters.MessagePackRemoteMessageConverter was removed as it was untested and compatibility is uncertain.

[Improvements]
OwlCore.Remoting.Transfer.MessageConverter.NewtonsoftRemoteMessageConverter is MASSIVELY improved. This version has all primitives, common structs and several classes unit tested with property changes and method call messages.
OwlCore.Remoting.RemoteOptionsAttribute can now be used on fields. [RemoteProperty] applies to fields when put on a class, and [RemoteOptions] now lets you disable specific fields.
Use explicit cast in OwlCore.Extensions.Cast{T}();

[Fixes]
Fixed an issue where StreamExtensions.ToBytes() and StreamExtensions.ToBytesAsync() would return an empty byte array when stream isn't seeked to beginning.

--- 0.0.24 ---
[New]
Added AbstractFolderExplorer in OwlCore.AbstractUI.Components. This is an AbstractUICollection that acts as a standalone, inbox component. A Folder explorer that interops with OwlCore.AbstractStorage to browse and select subfolders from an IFolderData.

[Breaking changes]
Removed cancellation token overload from InParallel. For cancellation, pass the token to the inner tasks.
Swapped enum value order for OwlCore.AbstractUI.Models.PreferredOrientation so Vertical is first and default.

[Fixes]
Fixed issue where "isIndeterminate" parameter of AbstractProgressIndicator wasn't being set from the ctor.
Fixed an issue where AbstractUICollectionViewModel wasn't relaying underlying item to the public Items property.
Fixed an issue where setting state in AbstractBooleanViewModel caused a StackOverflow.

--- 0.0.23 ---
[Breaking changes]
Renamed OwlCore.AbstractUI.Models.AbstractProgress to OwlCore.AbstractUI.Models.AbstractProgressIndicator.
Renamed OwlCore.AbstractUI.Models.AbstractProgressViewModel to OwlCore.AbstractUI.Models.AbstractProgressIndictatorViewModel.

--- 0.0.22 ---
[Breaking changes]
Moved EventAsTask from Threading to Flow.
Removed ExclusiveSynchronizationContext.
Removed "UIElement" from class names of all AbstractUI elements and ViewModels.
Renamed AbstractUIElementGroup to AbstractUICollection.
Refactored CachedHttpClientHandler to use events instead of Action callbacks in the constructor. Added CachedRequestFound and CachedRequestSaving events. Set e.Handled on these instead of returning true or false.

[Improvements]
AbstractUI now works with OwlCore.Remoting when you pass an instance to a MemberRemote.
AbstractUICollection now implements ICollection{AbstractUIElement}.
Added CancellationToken parameter to EventAsTask.

[Fixes]
Fixed potential memory leak in OwlCore.Remoting when RemoteMessageReceivingEventArgs.Handled is set to true.
Fixed an issue where an instance with an overriden == operator handed to MemberRemote could interfere with instance reference checks.

--- 0.0.21 ---
[Fixes]
Fixed a crash in OwlCore.Remoting.MemberRemote when the library catches and prepares to send an exception.

--- 0.0.20 ---
[Fixes]
Fixed threading issue with OwlCore.Remoting introduced in 0.0.19.

--- 0.0.19 ---
[Fixes]
Fixed a crash with OwlCore.Remoting when compiled with optimizations.

--- 0.0.18 ---
[Fixes]
Fixed an issue where remote member change messages were not scoping to specific MemberRemote instances without manually implementing IRemoteMemberMessage.

--- 0.0.17 ---
[Fixes]
Re-release of 0.0.16 to fix freezing visual studio when building.

--- 0.0.16 ---
[Improvements]
Hardened the fix introduced in 0.0.15.

--- 0.0.15 ---
[Fixes]
Fixed an issue where bidirectional remoting causes a loop for method calls and property changes.

--- 0.0.14 ---
[Improvements]
Added empty constructors to classes in OwlCore.Remoting.Transfer.Messages for deserializers.

--- 0.0.13 ---
[Fixes]
Fixed and improved type handling for NewtonsoftRemoteMessageConverter.

[Improvements]
Added additional checks, exceptions and instructions for mismatched data types in remote properties and method parameters.
Exposed a new SerializerSettings property for NewtonsoftRemoteMessageConverter.
		</PackageReleaseNotes>
		<DebugType>embedded</DebugType>
		<NeutralLanguage>en</NeutralLanguage>
		<Authors>Arlo Godfrey</Authors>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<DefineConstants>DEBUG;TRACE</DefineConstants>
		<DebugType>full</DebugType>
		<DebugSymbols>true</DebugSymbols>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<Optimize>true</Optimize>
		<ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
		<Deterministic>true</Deterministic>
	</PropertyGroup>

	<ItemGroup>
		<None Include="LICENSE.txt">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="OwlCore.Storage" Version="0.5.0" />
		<PackageReference Include="OwlCore.Extensions" Version="0.3.0" />
		<PackageReference Include="OwlCore.ComponentModel" Version="0.0.0" />

		<PackageReference Include="CommunityToolkit.Common" Version="8.0.0" />
		<PackageReference Include="CommunityToolkit.Diagnostics" Version="8.0.0" />
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.0.0" />

		<PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
		<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="6.0.0" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
		<PackageReference Include="System.Text.Json" Version="6.0.4" />
		<PackageReference Include="System.Threading.Tasks.Dataflow" Version="6.0.0" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
	</ItemGroup>

	<ItemGroup>
	  <None Update="logo.png">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	</ItemGroup>

</Project>
