using System;
using System.Collections.Generic;

namespace OwlCore.Extensions
{
    /// <summary>
    /// Enumerable-related extension methods.
    /// </summary>
    public static partial class EnumerableExtensions
    {
        /// <summary>
        /// Unshuffles the given array in place in O(n) using a (probably) original algorithm inspired by fisher-yates, restoring the position of each item using a shuffle map generated by <see cref="Shuffle{T}(T[])"/>.
        /// </summary>
        /// <typeparam name="T">The type of elements in the array.</typeparam>
        /// <param name="array">The array to shuffle.</param>
        /// <param name="shuffleMap">An array that maps indices to their original unshuffled positions. Returned from <see cref="Shuffle{T}(T[])"/>.</param>
        public static void Unshuffle<T>(this T[] array, int[] shuffleMap)
        {
            // The index to operate at for swapping. Can be anything in range.
            int operand = array.Length - 1;

            // Don't know if this algorithm has a name.
            // Was try to do something like Fisher-yates (Sattolo) but created this instead after a bit of whiteboarding.

            // Continue until swapping would swap with yourself.
            while (shuffleMap[operand] != operand)
            {
                var indexToSwap = shuffleMap[operand];

                var valueFromIndexToSwap = array[indexToSwap];
                var indexOfValueFromIndexToSwap = shuffleMap[indexToSwap];

                array[indexToSwap] = array[operand];
                shuffleMap[indexToSwap] = shuffleMap[operand];

                array[operand] = valueFromIndexToSwap;
                shuffleMap[operand] = indexOfValueFromIndexToSwap;
            }
        }

        /// <summary>
        /// Unshuffles the given list in place in O(n) using a (probably) original algorithm inspired by fisher-yates, restoring the position of each item using a shuffle map generated by <see cref="Shuffle{T}(IList{T})"/>.
        /// </summary>
        /// <typeparam name="T">The type of elements in the list.</typeparam>
        /// <param name="list">The list to shuffle.</param>
        /// <param name="shuffleMap">An array that maps indices to their original unshuffled positions. Returned from <see cref="Shuffle{T}(IList{T})"/>.</param>
        public static void Unshuffle<T>(this IList<T> list, int[] shuffleMap)
        {
            // The index to operate at for swapping. Can be anything in range.
            int operand = list.Count - 1;

            // Don't know if this algorithm has a name.
            // Was try to do something like Fisher-yates (Sattolo) but created this instead after a bit of whiteboarding.

            // Continue until swapping would swap with yourself
            while (shuffleMap[operand] != operand)
            {
                var indexToSwap = shuffleMap[operand];

                var valueFromIndexToSwap = list[indexToSwap];
                var indexOfValueFromIndexToSwap = shuffleMap[indexToSwap];

                list[indexToSwap] = list[operand];
                shuffleMap[indexToSwap] = shuffleMap[operand];

                list[operand] = valueFromIndexToSwap;
                shuffleMap[operand] = indexOfValueFromIndexToSwap;
            }
        }
    }
}