using System;
using System.Collections.Generic;

namespace OwlCore.Extensions
{
    /// <summary>
    /// Enumerable-related extension methods.
    /// </summary>
    public static partial class EnumerableExtensions
    {
        /// <summary>
        /// Unshuffles the given array in place in O(n) using a (probably) original algorithm inspired by fisher-yates, restoring the position of each item using a shuffle map generated by <see cref="Shuffle{T}(T[])"/>.
        /// </summary>
        /// <typeparam name="T">The type of elements in the array.</typeparam>
        /// <param name="array">The array to shuffle.</param>
        /// <param name="shuffleMap">An array that maps indices to their original unshuffled positions. Returned from <see cref="Shuffle{T}(T[])"/>.</param>
        public static void Unshuffle<T>(this T[] array, int[] shuffleMap)
        {
            int index = array.Length - 1;

            while (index >= 0)
            {
                if (shuffleMap[index] == index)
                {
                    index--;
                    continue;
                }

                var indexToSwap = shuffleMap[index];

                var valueFromIndexToSwap = array[indexToSwap];
                var indexOfValueFromIndexToSwap = shuffleMap[indexToSwap];

                array[indexToSwap] = array[index];
                shuffleMap[indexToSwap] = shuffleMap[index];

                array[index] = valueFromIndexToSwap;
                shuffleMap[index] = indexOfValueFromIndexToSwap;
            }
        }

        /// <summary>
        /// Unshuffles the given list in place in O(n) using a (probably) original algorithm inspired by fisher-yates, restoring the position of each item using a shuffle map generated by <see cref="Shuffle{T}(IList{T})"/>.
        /// </summary>
        /// <typeparam name="T">The type of elements in the list.</typeparam>
        /// <param name="list">The list to shuffle.</param>
        /// <param name="shuffleMap">An array that maps indices to their original unshuffled positions. Returned from <see cref="Shuffle{T}(IList{T})"/>.</param>
        public static void Unshuffle<T>(this IList<T> list, int[] shuffleMap)
        {
            int index = list.Count - 1;

            while (index >= 0)
            {
                if (shuffleMap[index] == index)
                {
                    index--;
                    continue;
                }

                var indexToSwap = shuffleMap[index];

                var valueFromIndexToSwap = list[indexToSwap];
                var indexOfValueFromIndexToSwap = shuffleMap[indexToSwap];

                list[indexToSwap] = list[index];
                shuffleMap[indexToSwap] = shuffleMap[index];

                list[index] = valueFromIndexToSwap;
                shuffleMap[index] = indexOfValueFromIndexToSwap;
            }
        }
    }
}